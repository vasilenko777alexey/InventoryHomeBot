import os, asyncio, logging, uvicorn, telebot, openpyxl, io, random
from starlette.applications import Starlette
from starlette.responses import Response, PlainTextResponse
from starlette.requests import Request
from starlette.routing import Route
from telegram import Update, InputFile, InputMediaDocument, ReplyKeyboardMarkup
from telegram.ext import Application, ContextTypes, MessageHandler, Updater, CommandHandler, CallbackContext, filters, ContextTypes, ApplicationBuilder

import threading
import requests
import time  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π webhook (—É—Å—Ç–æ–π—á–∏–≤–µ–µ –ø—Ä–∏ —Ä–µ—Å—Ç–∞—Ä—Ç–∞—Ö)

print('–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...') 

TOKEN = os.environ["TELEGRAM_TOKEN"]
URL   = os.environ["RENDER_EXTERNAL_URL"]     # Render –≤—ã–¥–∞—ë—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —Å–∞–º
BASE_URL = URL
PING_INTERVAL_SECONDS = 600
print("URL   = os.environ[RENDER_EXTERNAL_URL]")
print(os.environ["RENDER_EXTERNAL_URL"])
PORT  = int(os.getenv("PORT", 10000))          # Render —Å–ª—É—à–∞–µ—Ç —ç—Ç–æ—Ç PORT

log_fmt = "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
logging.basicConfig(format=log_fmt, level=logging.INFO)

#logging.info(' logging.info –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...')

# --- –∫–ª–∞—Å—Å—ã --------------------------------------------------------------

# –ö–ª–∞—Å—Å Location ‚Äî –º–µ—Å—Ç–æ –≤ –∏–≥—Ä–µ
class Location:
    def __init__(self, name, description, type = 'location', status = None, key = None ):
        self.name = name  # –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏
        self.description = description  # –æ–ø–∏—Å–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏
        self.connections = {}   # —Å–ø–∏—Å–æ–∫ —Å–æ—Å–µ–¥–Ω–∏—Ö –ª–æ–∫–∞—Ü–∏–π
        self.monster = None  # –º–æ–Ω—Å—Ç—Ä –≤ –ª–æ–∫–∞—Ü–∏–∏ (–º–æ–∂–µ—Ç –±—ã—Ç—å None)
        self.items = []      # –ø—Ä–µ–¥–º–µ—Ç—ã –≤ –ª–æ–∫–∞—Ü–∏–∏
        self.type = type      # —Ç–∏–ø –ª–æ–∫–∞—Ü–∏–∏ –¥–≤–µ—Ä—å/–ª–æ–∫–∞—Ü–∏—è - door/location
        self.status = status #–°—Ç–∞—Ç—É—Å –¥–≤–µ—Ä–∏, –µ—Å–ª–∏ —Ç–∏–ø –¥–≤–µ—Ä—å, –æ—Ç–∫—Ä—ã—Ç–∞/–∑–∞–∫—Ä—ã—Ç–∞/—Å–ª–æ–º–∞–Ω–∞ - open/lock/broken
        self.key = key #–ö–ª—é—á –¥–ª—è –¥–≤–µ—Ä–∏, –µ—Å–ª–∏ —Ç–∏–ø –¥–≤–µ—Ä—å, —Å—Ç—Ä–æ–∫–∞ - –ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª—é—á–∞

    def connect(self, other_location, direction):
        # –°–æ–∑–¥–∞–µ–º –¥–≤—É–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ —Å—Ç–æ—Ä–æ–Ω–∞–º —Å–≤–µ—Ç–∞
        # direction - —Å—Ç—Ä–æ–∫–∞ —Ç–∏–ø–∞ '–°–µ–≤–µ—Ä'/'–Æ–≥'/'–í–æ—Å—Ç–æ–∫'/'–ó–∞–ø–∞–¥'
        self.connections[direction] = other_location
        # –û–±—Ä–∞—Ç–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –¥—Ä—É–≥–æ–π –ª–æ–∫–∞—Ü–∏–∏ (–ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–µ)
        opposite_directions = { #—Å–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
            '–°–µ–≤–µ—Ä': '–Æ–≥',
            '–Æ–≥': '–°–µ–≤–µ—Ä',
            '–í–æ—Å—Ç–æ–∫': '–ó–∞–ø–∞–¥',
            '–ó–∞–ø–∞–¥': '–í–æ—Å—Ç–æ–∫',
            '–î–≤–µ—Ä—å': '–î–≤–µ—Ä—å'
        }
        other_location.connections[opposite_directions[direction]] = self
        
# –ö–ª–∞—Å—Å Game ‚Äî —É–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∏–≥—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class Game:
    def __init__(self):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–∫–∞—Ü–∏–π
        self.locations = {}
        self.create_world()
         # –ù–∞—á–∞–ª—å–Ω–∞—è –ª–æ–∫–∞—Ü–∏—è –∏–≥—Ä–æ–∫–∞
        self.current_location = self.locations['–î–µ—Ä–µ–≤–Ω—è']
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º–Ω–∞—Ç—ã (–ø—Ä–æ—Å—Ç–∞—è –∫–∞—Ä—Ç–∞)
        self.rooms = {
            'entrance': {
                'description': '–í—ã –Ω–∞ –≤—Ö–æ–¥–µ –≤ —Å—Ç–∞—Ä—ã–π –∑–∞–±—Ä–æ—à–µ–Ω–Ω—ã–π –¥–æ–º.',
                'exits': {'‚¨ÜÔ∏è north': 'hall'}
            },
            'hall': {
                'description': '–í –±–æ–ª—å—à–æ–π –∑–∞–ª–µ —Å —Ä–∞–∑–±—Ä–æ—Å–∞–Ω–Ω—ã–º–∏ —Å—Ç—É–ª—å—è–º–∏.',
                'exits': {'‚¨áÔ∏è south': 'entrance', '‚û°Ô∏è east': 'kitchen'}
            },
            'kitchen': {
                'description': '–ù–∞ –∫—É—Ö–Ω–µ —Å—Ç–æ–∏—Ç —Å—Ç–∞—Ä—ã–π —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫.',
                'exits': {'‚¨ÖÔ∏è west': 'hall'}
            }
        }
        self.current_room = 'entrance'  # –Ω–∞—á–∞–ª—å–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞
        
    def create_world(self):
        # –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞—Ü–∏–∏
        village         = Location('–î–µ—Ä–µ–≤–Ω—è', '–ú–∞–ª–µ–Ω—å–∫–∞—è —É—é—Ç–Ω–∞—è –¥–µ—Ä–µ–≤–Ω—è.')
        forest          = Location('–õ–µ—Å', '–¢—ë–º–Ω—ã–π –¥—Ä–µ–º—É—á–∏–π –ª–µ—Å.')
        castle          = Location('–ó–∞–º–æ–∫', '–î—Ä–µ–≤–Ω–∏–π –∑–∞–±—Ä–æ—à–µ–Ω–Ω—ã–π —Ç–∞–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞–º–æ–∫')
        d_castle_hallway  = Location('–î–≤–µ—Ä—å –≤ –∑–∞–º–æ–∫', '–ú–∞—Å—Å–∏–≤–Ω–∞—è –¥—É–±–æ–≤–∞—è –¥–≤–µ—Ä—å', 'door', 'open' )
        hallway         = Location('–ü—Ä–∏—Ö–æ–∂–∞—è –∑–∞–º–∫–∞', '–í—ã –≤–æ—à–ª–∏ –≤ –ø—Ä–∏—Ö–æ–∂—É—é –∑–∞–º–∫–∞')
        mountain_path   = Location('–ì–æ—Ä–Ω–∞—è —Ç—Ä–æ–ø–∞', '–¢—Ä–æ–ø–∞ –≤ –≥–æ—Ä—ã.')
               
        # –°–æ–µ–¥–∏–Ω—è–µ–º –ª–æ–∫–∞—Ü–∏–∏
        # –°–æ–µ–¥–∏–Ω—è–µ–º –ø–æ —Å—Ç–æ—Ä–æ–Ω–∞–º —Å–≤–µ—Ç–∞
        village.connect(forest, '–°–µ–≤–µ—Ä')          # –õ–µ—Å —é–∂–Ω–µ–µ –¥–µ—Ä–µ–≤–Ω–∏
        forest.connect(mountain_path, '–í–æ—Å—Ç–æ–∫')  # –ì–æ—Ä–Ω–∞—è —Ç—Ä–æ–ø–∞ –≤–æ—Å—Ç–æ—á–Ω–µ–µ –ª–µ—Å–∞
        forest.connect(castle, '–°–µ–≤–µ—Ä')
        castle.connect(d_castle_hallway, '–î–≤–µ—Ä—å')  # –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –¥–≤–µ—Ä—å—é
        d_castle_hallway.connect(hallway, '–î–≤–µ—Ä—å') # –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –¥–≤–µ—Ä—å—é
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–ª–æ–≤–∞—Ä—å –ª–æ–∫–∞—Ü–∏–π –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –ø–æ –∏–º–µ–Ω–∏
        self.locations['–î–µ—Ä–µ–≤–Ω—è'] = village
        self.locations['–õ–µ—Å'] = forest
        self.locations['–ì–æ—Ä–Ω–∞—è —Ç—Ä–æ–ø–∞'] = mountain_path
        self.locations['–ó–∞–º–æ–∫'] = castle
        self.locations['–î–≤–µ—Ä—å –≤ –∑–∞–º–æ–∫'] = d_castle_hallway
        self.locations['–ü—Ä–∏—Ö–æ–∂–∞—è –∑–∞–º–∫–∞'] = hallway
        
    def move_to(self, direction):
        # –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if direction in self.current_location.connections:
            self.current_location=self.current_location.connections[direction]
            return True
        return False

    def get_description(self):
        room = self.rooms[self.current_room]
        desc = room['description']
        exits = ', '.join(room['exits'].keys())
        return f"{desc}\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {exits}"

    def move(self, direction):
        room = self.rooms[self.current_room]
        if direction in room['exits']:
            self.current_room = room['exits'][direction]
            return True
        else:
            return False

# –•—Ä–∞–Ω–µ–Ω–∏–µ –∏–≥—Ä –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_games = {}


# --- —Ö–µ–Ω–¥–ª–µ—Ä—ã --------------------------------------------------------------

async def echo(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    #await update.message.reply_text(update.message.text + " , id message: "+ str(update.message.id) + " " + str(update.message.reply_to_message.message_id) + " " + str(update.message.reply_to_message))
    await update.message.reply_text(update.message.text )
async def def_reply(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    text = update.message.text    
    
    if text == 'test':
        await update.message.reply_text(update.message.text + " , id message: "+ str(update.message.id) + " " + str(update.message.reply_to_message.message_id) + " " + str(update.message.reply_to_message))
        return

    user_id = update.effective_user.id
    game = user_games.get(user_id)
    if not game:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π /start.")
        return
        
    if text == '‚¨ÜÔ∏è north' or text == '‚¨áÔ∏è south' or text == '‚û°Ô∏è east' or text == '‚¨ÖÔ∏è west' :
        #direction = context.args[0].lower()
        direction = text
        moved = game.move(direction)
        
        if moved:
            description = game.get_description()
            #await update.message.reply_text(description)
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π (–≤—ã—Ö–æ–¥–æ–≤)
            room_exits = list(game.rooms[game.current_room]['exits'].keys())  
            #keyboard = [[direction] for direction in room_exits]  # –ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ ‚Äî –æ—Ç–¥–µ–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ 
            keyboard = [[direction for direction in room_exits],
                       ['üñê –í–∑—è—Ç—å', 'üëÅ –°–º–æ—Ç','üéí –ò–Ω–≤', 'üö™ –û—Ç–∫—Ä—ã—Ç—å']]   
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)    
            await update.message.reply_text(description, reply_markup=reply_markup)
        else:
            await update.message.reply_text("–ù–µ–ª—å–∑—è –ø—Ä–æ–π—Ç–∏ –≤ —ç—Ç–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏.")
#‚õî‚úÖ ü§∑üîé üéí‚ö†Ô∏èü§ñüõë‚ùìüß≠üì¶

async def start(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ. –Ø –±–æ—Ç. ")

async def game(update: Update, context: CallbackContext) -> None:
    user_id = update.effective_user.id
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é
    user_games[user_id] = Game()
    await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–µ–∫—Å—Ç–æ–≤—É—é –±—Ä–æ–¥–∏–ª–∫—É!\n" +
                                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã /look.")
    
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /look ‚Äî –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∫–æ–º–Ω–∞—Ç—ã
async def look(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    game = user_games.get(user_id)
    if not game:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π /game.")
        return
        
    description = game.get_description()
    location = game.current_location
    location_desc = game.current_location.description
    #await update.message.reply_text(location)
    await update.message.reply_text(location_desc)
    connections = list(game.current_location.connections.keys())
    await update.message.reply_text(connections)
    connections = ', '.join(game.current_location.connections.keys())
    
    await update.message.reply_text(connections)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π (–≤—ã—Ö–æ–¥–æ–≤)
    room_exits = list(game.rooms[game.current_room]['exits'].keys())    
    keyboard = [[direction] for direction in room_exits]  # –ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ ‚Äî –æ—Ç–¥–µ–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞    
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)    
    await update.message.reply_text(description, reply_markup=reply_markup)

    #keyboard = ReplyKeyboardMarkup(keyboard=[
    #            ['Button 1', 'Button 2'],
    #            ['Button 3', 'Button 4']
    #        ])
    #await update.message.reply_text(room_exits, reply_markup=keyboard)
    
    

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /go <–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ>
async def go(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    game = user_games.get(user_id)
    if not game:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π /start.")
        return
    
    if len(context.args) == 0:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ. –ù–∞–ø—Ä–∏–º–µ—Ä: /go north")
        return
    
    direction = context.args[0].lower()
    moved = game.move(direction)
    
    if moved:
        description = game.get_description()
        await update.message.reply_text(description)
    else:
        await update.message.reply_text("–ù–µ–ª—å–∑—è –ø—Ä–æ–π—Ç–∏ –≤ —ç—Ç–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏.")

    

async def excel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ excel —Ñ–∞–π–ª–∞")
    
    chat_id = update.effective_chat.id

    # –ò—â–µ–º –≤ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Ñ–∞–π–ª–∞ Excel
    # –ü–æ–ª—É—á–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å–æ–æ–±—â–µ–Ω–∏–π (–º–æ–∂–Ω–æ –±–æ–ª—å—à–µ –∏–ª–∏ –º–µ–Ω—å—à–µ)

    message_id = 9
   
    message_to_copy = await context.bot.forward_message(chat_id, chat_id, message_id)
    if message_to_copy.text:
        await update.message.reply_text(text=message_to_copy.text)
    
    await update.message.reply_text("–≠—Ç–∞–ø 1 –æ–±—Ä–∞–±–æ—Ç–∫–∏ excel —Ñ–∞–π–ª–∞")

    if message_to_copy.document:
    #if message_to_copy.text:
        await context.bot.send_document(chat_id=chat_id, document=message_to_copy.document.file_id)
        text="–î–æ–∫—É–º–µ–Ω—Ç id: " + str(message_to_copy.document.file_id)
        await context.bot.send_message(chat_id=chat_id, text=text)
        file = await message_to_copy.document.get_file()
        TEMP_FILE_PATH = 'temp_excel.xlsx'
        await file.download_to_drive(TEMP_FILE_PATH)

         # –û—Ç–∫—Ä—ã–≤–∞–µ–º Excel –∏ –º–µ–Ω—è–µ–º —è—á–µ–π–∫–∏ A1 -> A2
        wb = openpyxl.load_workbook(TEMP_FILE_PATH)
        ws = wb.active

        cell_a1_value = ws['A1'].value
        ws['A2'].value = cell_a1_value

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ç–æ—Ç –∂–µ —Ñ–∞–π–ª
        wb.save(TEMP_FILE_PATH)

        # –°–æ–∑–¥–∞—ë–º InputFile –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
        #new_file = InputFile(open(TEMP_FILE_PATH, 'rb'))
        
        await update.message.reply_text("–≠—Ç–∞–ø 2 –æ–±—Ä–∞–±–æ—Ç–∫–∏ excel —Ñ–∞–π–ª–∞")
        await update.message.reply_text(TEMP_FILE_PATH)
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ InputMediaDocument
        #with open(TEMP_FILE_PATH, 'rb') as f:
        #    new_file = InputFile(f)

            # –ó–∞–º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∞–π–ª–æ–º
        #   await context.bot.edit_message_media(
        #       chat_id=chat_id,
        #       message_id=message_id,
        #       media=InputMediaDocument(media=new_file)
        #   )
            
        with open(TEMP_FILE_PATH, "rb") as file:  
            media = InputMediaDocument(file)  
            message_id_2 = 351
            await context.bot.edit_message_media(chat_id=chat_id, message_id=message_id_2, media=media)  

        await update.message.reply_text("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω.")


        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º A1
        await update.message.reply_text(f"–ó–Ω–∞—á–µ–Ω–∏–µ —è—á–µ–π–∫–∏ A1: {cell_a1_value}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Ñ–∞–π–ª  
        #await context.bot.send_document(
        #    chat_id=chat_id,
        #    document=new_file,
        #    filename='–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π_—Ñ–∞–π–ª.xlsx'
        #)
        await update.message.reply_text("–≠—Ç–∞–ø 3 –æ–±—Ä–∞–±–æ—Ç–∫–∏ excel —Ñ–∞–π–ª–∞")
        
        #await context.bot.edit_message_media(
        #        chat_id=chat_id,
        #        message_id=message_id,
        #        media=InputMediaDocument(media=new_file)
        #    )
        await update.message.reply_text("–ö–æ–Ω–µ—Ü –æ–±—Ä–∞–±–æ—Ç–∫–∏ excel —Ñ–∞–π–ª–∞")
            
      

'''
    excel_file_bytes = None
'''
#-------------------------------------------------------------------

async def main():
    app = Application.builder().token(TOKEN).updater(None).write_timeout(30).read_timeout(30).build()
    
    #app.add_handler(MessageHandler(filters.ALL, echo)) # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND) & (~filters.REPLY), echo)) # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥
    app.add_handler(MessageHandler(filters.REPLY & (~filters.COMMAND), def_reply)) # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥
    
    #app.add_handler(MessageHandler(def_text, content_types=['text']))
    app.add_handler(CommandHandler('start', start)) 
    app.add_handler(CommandHandler('game', game)) 
    app.add_handler(CommandHandler('look', look))
    app.add_handler(CommandHandler('go', go))
    app.add_handler(CommandHandler('excel', excel)) 
    await app.bot.set_webhook(f"{URL}/telegram", allowed_updates=Update.ALL_TYPES)
    print("await app.bot.set_webhook(f{URL}/telegram, allowed_updates=Update.ALL_TYPES)")
    print(f"{URL}/telegram")

    async def telegram(request: Request) -> Response:
        await app.update_queue.put(Update.de_json(await request.json(), app.bot))
        return Response()

    async def health(_: Request) -> PlainTextResponse:
        return PlainTextResponse("ok")

    starlette = Starlette(routes=[
        Route("/telegram", telegram, methods=["POST"]),
        Route("/healthcheck", health, methods=["GET"]),
#        Route("/health", health, methods=["GET"]),
    ])

    server = uvicorn.Server(
        uvicorn.Config(app=starlette, host="0.0.0.0", port=PORT, use_colors=False)
    )
    async with app:
        await app.start()
        await server.serve()
        await app.stop()

#-------------------------------------------------------------------
        
def self_ping_loop():
    """
    –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø–∏–Ω–≥—É–µ—Ç /health —á–µ—Ä–µ–∑ –≤–Ω–µ—à–Ω–∏–π URL.
    –≠—Ç–æ —Å–æ–∑–¥–∞—ë—Ç –≤—Ö–æ–¥—è—â–∏–π HTTP-—Ç—Ä–∞—Ñ–∏–∫ –∏ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –∞–≤—Ç–æ—É—Å—ã–ø–ª–µ–Ω–∏–µ –Ω–∞ Free –ø–ª–∞–Ω–µ.
    –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: —É Render Free Web Services –∑–∞—Å—ã–ø–∞—é—Ç –ø–æ—Å–ª–µ ~15 –º–∏–Ω—É—Ç –±–µ–∑ –≤—Ö–æ–¥—è—â–µ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞.
    """
    if not BASE_URL:
        print("BASE_URL –Ω–µ –∑–∞–¥–∞–Ω; —Å–∞–º–æ–ø–∏–Ω–≥ –æ—Ç–∫–ª—é—á—ë–Ω (–Ω–µ –∑–Ω–∞–µ–º, –∫—É–¥–∞ —Å—Ç—É—á–∞—Ç—å—Å—è).")
        #app.logger.warning(
        #    "BASE_URL –Ω–µ –∑–∞–¥–∞–Ω; —Å–∞–º–æ–ø–∏–Ω–≥ –æ—Ç–∫–ª—é—á—ë–Ω (–Ω–µ –∑–Ω–∞–µ–º, –∫—É–¥–∞ —Å—Ç—É—á–∞—Ç—å—Å—è)."
        #)
        return

#    ping_url = f"{BASE_URL}/health" #/healthcheck
    ping_url = f"{BASE_URL}/healthcheck" 
    print("–°–∞–º–æ–ø–∏–Ω–≥ –≤–∫–ª—é—á—ë–Ω, URL: %s, –∏–Ω—Ç–µ—Ä–≤–∞–ª: %s —Å–µ–∫", ping_url, PING_INTERVAL_SECONDS)
    #app.logger.info("–°–∞–º–æ–ø–∏–Ω–≥ –≤–∫–ª—é—á—ë–Ω, URL: %s, –∏–Ω—Ç–µ—Ä–≤–∞–ª: %s —Å–µ–∫", ping_url, PING_INTERVAL_SECONDS)
    while True:
        try:
            requests.get(ping_url, timeout=10)
        except Exception as e:
            print("–û—à–∏–±–∫–∞ —Å–∞–º–æ–ø–∏–Ω–≥–∞: %s", e)
            #app.logger.warning("–û—à–∏–±–∫–∞ —Å–∞–º–æ–ø–∏–Ω–≥–∞: %s", e)
        time.sleep(PING_INTERVAL_SECONDS)


# –°—Ç–∞—Ä—Ç —Ñ–æ–Ω–æ–≤—ã—Ö –ø–æ—Ç–æ–∫–æ–≤ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–æ–¥—É–ª—è (–∫–æ–≥–¥–∞ –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–¥–Ω–∏–º–∞–µ—Ç—Å—è gunicorn-–æ–º)
#threading.Thread(target=ensure_webhook, daemon=True).start()
#if SELF_PING_ENABLED:
threading.Thread(target=self_ping_loop, daemon=True).start()

if __name__ == "__main__":
    asyncio.run(main())
