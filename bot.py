import os, asyncio, logging, uvicorn, telebot, openpyxl, io, random
from starlette.applications import Starlette
from starlette.responses import Response, PlainTextResponse
from starlette.requests import Request
from starlette.routing import Route
from telegram import Update, InputFile, InputMediaDocument, ReplyKeyboardMarkup
from telegram.ext import Application, ContextTypes, MessageHandler, Updater, CommandHandler, CallbackContext, filters, ContextTypes, ApplicationBuilder

import threading
import requests
import time  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π webhook (—É—Å—Ç–æ–π—á–∏–≤–µ–µ –ø—Ä–∏ —Ä–µ—Å—Ç–∞—Ä—Ç–∞—Ö)

print('–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...') 

TOKEN = os.environ["TELEGRAM_TOKEN"]
URL   = os.environ["RENDER_EXTERNAL_URL"]     # Render –≤—ã–¥–∞—ë—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —Å–∞–º
BASE_URL = URL
PING_INTERVAL_SECONDS = 600
print("URL   = os.environ[RENDER_EXTERNAL_URL]")
print(os.environ["RENDER_EXTERNAL_URL"])
PORT  = int(os.getenv("PORT", 10000))          # Render —Å–ª—É—à–∞–µ—Ç —ç—Ç–æ—Ç PORT

log_fmt = "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
logging.basicConfig(format=log_fmt, level=logging.INFO)

#logging.info(' logging.info –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...')

# --- –∫–ª–∞—Å—Å—ã --------------------------------------------------------------

# –ö–ª–∞—Å—Å Player ‚Äî –∏–≥—Ä–æ–∫
class Player:
    def __init__(self, name, description, health):
        self.name = name                  # –Ω–∞–∑–≤–∞–Ω–∏–µ
        self.description = description    # –æ–ø–∏—Å–∞–Ω–∏–µ
        self.inventory = []               # –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
        self.health = health              # –∑–¥–æ—Ä–æ–≤—å–µ
        
# –ö–ª–∞—Å—Å Monster ‚Äî –º–æ–Ω—Å—Ç—Ä –≤ –ª–æ–∫–∞—Ü–∏–∏
class Monster:
    def __init__(self, name, health, attack, defense):
        self.name = name  # –∏–º—è –º–æ–Ω—Å—Ç—Ä–∞
        self.health = health  # –∑–¥–æ—Ä–æ–≤—å–µ –º–æ–Ω—Å—Ç—Ä–∞
        self.attack = attack              # 
        self.defense = defense            #

    def take_damage(self, damage):
        self.health -= damage

    def is_dead(self):
        return self.health <= 0

# –ö–ª–∞—Å—Å Item ‚Äî –≤–µ—â–∏, –æ—Ä—É–∂–∏–µ, –±—Ä–æ–Ω—è, –∫–ª—é—á–∏
class Item:
    def __init__(self, name, description, type = 'thing', attack = 0, defense = 0, number = 1, picture = '‚ùî'):
        self.name = name                  # –Ω–∞–∑–≤–∞–Ω–∏–µ
        self.description = description    # –æ–ø–∏—Å–∞–Ω–∏–µ
        self.type = type                  # —Ç–∏–ø: –≤–µ—â—å-thing, –æ—Ä—É–∂–∏–µ-weapon, —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∞-equipment, –∫–ª—é—á–∏-key, –¥–µ–Ω—å–≥–∏-money 
        self.attack = attack              # 
        self.defense = defense            #
        self.number = number              #
        self.picture = picture   #
        
# –ö–ª–∞—Å—Å Location ‚Äî –º–µ—Å—Ç–æ –≤ –∏–≥—Ä–µ
class Location:
    def __init__(self, name, description, type = 'location', status = None, key = None ):
        self.name = name  # –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏
        self.description = description  # –æ–ø–∏—Å–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏
        self.connections = {}   # —Å–ø–∏—Å–æ–∫ —Å–æ—Å–µ–¥–Ω–∏—Ö –ª–æ–∫–∞—Ü–∏–π
        self.monster = None  # –º–æ–Ω—Å—Ç—Ä –≤ –ª–æ–∫–∞—Ü–∏–∏ (–º–æ–∂–µ—Ç –±—ã—Ç—å None)
        self.items = []      # –ø—Ä–µ–¥–º–µ—Ç—ã –≤ –ª–æ–∫–∞—Ü–∏–∏
        self.type = type      # —Ç–∏–ø –ª–æ–∫–∞—Ü–∏–∏ –¥–≤–µ—Ä—å/–ª–æ–∫–∞—Ü–∏—è - door/location
        self.status = status #–°—Ç–∞—Ç—É—Å –¥–≤–µ—Ä–∏, –µ—Å–ª–∏ —Ç–∏–ø –¥–≤–µ—Ä—å, –æ—Ç–∫—Ä—ã—Ç–∞/–∑–∞–∫—Ä—ã—Ç–∞/—Å–ª–æ–º–∞–Ω–∞ - open/lock/broken
        self.key = key #–ö–ª—é—á –¥–ª—è –¥–≤–µ—Ä–∏, –µ—Å–ª–∏ —Ç–∏–ø –¥–≤–µ—Ä—å, —Å—Ç—Ä–æ–∫–∞ - –ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª—é—á–∞

    def connect(self, other_location, direction):
        # –°–æ–∑–¥–∞–µ–º –¥–≤—É–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ —Å—Ç–æ—Ä–æ–Ω–∞–º —Å–≤–µ—Ç–∞
        # direction - —Å—Ç—Ä–æ–∫–∞ —Ç–∏–ø–∞ '–°–µ–≤–µ—Ä'/'–Æ–≥'/'–í–æ—Å—Ç–æ–∫'/'–ó–∞–ø–∞–¥'
        self.connections[direction] = other_location
        # –û–±—Ä–∞—Ç–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –¥—Ä—É–≥–æ–π –ª–æ–∫–∞—Ü–∏–∏ (–ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–µ)
        opposite_directions = { #—Å–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
            '‚¨ÜÔ∏è –°–µ–≤–µ—Ä': '‚¨áÔ∏è –Æ–≥',
            '‚¨áÔ∏è –Æ–≥': '‚¨ÜÔ∏è –°–µ–≤–µ—Ä',
            '‚û°Ô∏è –í–æ—Å—Ç–æ–∫': '‚¨ÖÔ∏è –ó–∞–ø–∞–¥',
            '‚¨ÖÔ∏è –ó–∞–ø–∞–¥': '‚û°Ô∏è –í–æ—Å—Ç–æ–∫',
            '–î–≤–µ—Ä—å': '–î–≤–µ—Ä—å'
        }
        other_location.connections[opposite_directions[direction]] = self
        
# –ö–ª–∞—Å—Å Game ‚Äî —É–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∏–≥—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class Game:
    def __init__(self):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–∫–∞—Ü–∏–π
        self.locations = {}
        self.player = Player("–•—Ä–∞–Ω–∏—Ç–µ–ª—å","–ò–∑ –æ—Ä–¥–µ–Ω–∞ —Ö—Ä–∞–Ω–∏—Ç–µ–ª–µ–π", 100)
        self.create_world()
         # –ù–∞—á–∞–ª—å–Ω–∞—è –ª–æ–∫–∞—Ü–∏—è –∏–≥—Ä–æ–∫–∞
        self.current_location = self.locations['–î–µ—Ä–µ–≤–Ω—è']
        self.current_box = self.player.inventory
        
    def create_world(self):
        # –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞—Ü–∏–∏
        village          = Location('–î–µ—Ä–µ–≤–Ω—è', '–ú–∞–ª–µ–Ω—å–∫–∞—è —É—é—Ç–Ω–∞—è –¥–µ—Ä–µ–≤–Ω—è.')
        fountain         = Location('–¶–µ–ª–µ–±–Ω—ã–π –§–æ–Ω—Ç–∞–Ω', '–§–æ–Ω—Ç–∞–Ω –∏—Å—Ü–µ–ª—è—é—â–∏–π —Ä–∞–Ω—ã.')
        forest           = Location('–õ–µ—Å', '–¢—ë–º–Ω—ã–π –¥—Ä–µ–º—É—á–∏–π –ª–µ—Å.')
        castle_entry     = Location('–í—Ö–æ–¥ –≤ –∑–∞–º–æ–∫', '–í—ã –ø–µ—Ä–µ–¥ –¥—Ä–µ–≤–Ω–∏–º –∑–∞–±—Ä–æ—à–µ–Ω–Ω—ã–º —Ç–∞–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º –∑–∞–º–∫–æ–º')
        d_castle_hallway = Location('–î–≤–µ—Ä—å: –∑–∞–º–æ–∫-–ø—Ä–∏—Ö–æ–∂–∞—è', '–ú–∞—Å—Å–∏–≤–Ω–∞—è –¥—É–±–æ–≤–∞—è –¥–≤–µ—Ä—å', 'door', 'open' )
        hallway          = Location('–ü—Ä–∏—Ö–æ–∂–∞—è –∑–∞–º–∫–∞', '–í—ã –≤–æ—à–ª–∏ –≤ –ø—Ä–∏—Ö–æ–∂—É—é –∑–∞–º–∫–∞')
        mountain_path    = Location('–ì–æ—Ä–Ω–∞—è —Ç—Ä–æ–ø–∞', '–¢—Ä–æ–ø–∞ –≤ –≥–æ—Ä—ã.')
        d_hallway_dungeon = Location('–î–≤–µ—Ä—å: –ø—Ä–∏—Ö–æ–∂–∞—è-–ø–æ–¥–∑–µ–º–µ–ª—å–µ', '–ú–∞—Å—Å–∏–≤–Ω–∞—è –¥—É–±–æ–≤–∞—è –¥–≤–µ—Ä—å', 'door', 'lock', '–°—Ç–∞—Ä—ã–π —Ä–∂–∞–≤—ã–π –∫–ª—é—á' )
               
        # –°–æ–µ–¥–∏–Ω—è–µ–º –ª–æ–∫–∞—Ü–∏–∏
        # –°–æ–µ–¥–∏–Ω—è–µ–º –ø–æ —Å—Ç–æ—Ä–æ–Ω–∞–º —Å–≤–µ—Ç–∞
        village.connect(forest, '‚¨ÜÔ∏è –°–µ–≤–µ—Ä')          # –Ω–∞ —Å–µ–≤–µ—Ä –ª–µ—Å
        village.connect(fountain, '‚û°Ô∏è –í–æ—Å—Ç–æ–∫')       # –Ω–∞ –≤–æ—Å—Ç–æ–∫–µ —Ñ–æ–Ω—Ç–∞–Ω
        forest.connect(mountain_path, '‚û°Ô∏è –í–æ—Å—Ç–æ–∫')  # –ì–æ—Ä–Ω–∞—è —Ç—Ä–æ–ø–∞ –≤–æ—Å—Ç–æ—á–Ω–µ–µ –ª–µ—Å–∞
        #‚¨áÔ∏è ‚¨ÖÔ∏è
        forest.connect(castle_entry, '‚¨ÜÔ∏è –°–µ–≤–µ—Ä')
        castle_entry.connect(d_castle_hallway, '‚¨ÜÔ∏è –°–µ–≤–µ—Ä')  # –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –¥–≤–µ—Ä—å—é
        d_castle_hallway.connect(hallway, '‚¨ÜÔ∏è –°–µ–≤–µ—Ä') # –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –¥–≤–µ—Ä—å—é
        hallway.connect(d_hallway_dungeon, '‚¨ÜÔ∏è –°–µ–≤–µ—Ä') # –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –¥–≤–µ—Ä—å—é
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–ª–æ–≤–∞—Ä—å –ª–æ–∫–∞—Ü–∏–π –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –ø–æ –∏–º–µ–Ω–∏
        self.locations['–î–µ—Ä–µ–≤–Ω—è'] = village
        self.locations['–¶–µ–ª–µ–±–Ω—ã–π –§–æ–Ω—Ç–∞–Ω'] = fountain
        self.locations['–õ–µ—Å'] = forest
        self.locations['–ì–æ—Ä–Ω–∞—è —Ç—Ä–æ–ø–∞'] = mountain_path
        self.locations['–í—Ö–æ–¥ –≤ –∑–∞–º–æ–∫'] = castle_entry
        self.locations['–î–≤–µ—Ä—å: –∑–∞–º–æ–∫-–ø—Ä–∏—Ö–æ–∂–∞—è'] = d_castle_hallway
        self.locations['–ü—Ä–∏—Ö–æ–∂–∞—è –∑–∞–º–∫–∞'] = hallway
        self.locations['–î–≤–µ—Ä—å: –ø—Ä–∏—Ö–æ–∂–∞—è-–ø–æ–¥–∑–µ–º–µ–ª—å–µ'] = d_hallway_dungeon

        #–°–æ–∑–¥–∞–µ–º –≤–µ—â–∏ –æ—Ä—É–∂–∏–µ —ç–∫–∏–ø–∏—Ä–æ–≤–∫—É –∫–ª—é—á–∏
        hunter_knife = Item('–û—Ö–æ—Ç–Ω–∏—á–∏–π –Ω–æ–∂', '–•–æ—Ä–æ—à–∏–π –∫—Ä–µ–ø–∫–∏–π –Ω–æ–∂', 'weapon', 10, 0, 1, 'üî™')
        leather_gloves = Item('–ö–æ–∂–∞–Ω–Ω—ã–µ –ø–µ—Ä—á–∞—Ç–∫–∏', '–°—Ç–∞—Ä—ã–µ –∫–æ–∂–∞–Ω–Ω—ã–µ –ø–µ—Ä—á–∞—Ç–∫–∏', 'equipment', 0, 5, 1, 'üß§')


        #–ó–∞–ø–æ–ª–Ω—è–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
        self.player.inventory.append(hunter_knife)
        self.player.inventory.append(leather_gloves)
   
        
    def move_to(self, direction, answer):
        # –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if direction in self.current_location.connections:
            if (self.current_location.connections[direction].type == 'door'
                and self.current_location.connections[direction].status == 'open'):                    
                    self.current_location=self.current_location.connections[direction].connections[direction]
                    return True
            elif (self.current_location.connections[direction].type == 'door'
                and self.current_location.connections[direction].status == 'lock'):
                    answer.append('–î–≤–µ—Ä—å –∑–∞–ø–µ—Ä—Ç–∞. –ù—É–∂–µ–Ω: ' + self.current_location.connections[direction].key)                    
                    return False
            else:
                self.current_location=self.current_location.connections[direction]
                return True
        return False


# –•—Ä–∞–Ω–µ–Ω–∏–µ –∏–≥—Ä –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_games = {}


# --- —Ö–µ–Ω–¥–ª–µ—Ä—ã --------------------------------------------------------------

async def echo(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    #await update.message.reply_text(update.message.text + " , id message: "+ str(update.message.id) + " " + str(update.message.reply_to_message.message_id) + " " + str(update.message.reply_to_message))
    await update.message.reply_text(update.message.text )
async def def_reply(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    text = update.message.text    
    
    if text == 'test':
        await update.message.reply_text(update.message.text + " , id message: "+ str(update.message.id) + " " + str(update.message.reply_to_message.message_id) + " " + str(update.message.reply_to_message))
        return

    user_id = update.effective_user.id
    game = user_games.get(user_id)
    if not game:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π /game.")
        return
            
    if text == '‚¨ÜÔ∏è –°–µ–≤–µ—Ä' or text == '‚¨áÔ∏è –Æ–≥' or text == '‚û°Ô∏è –í–æ—Å—Ç–æ–∫' or text == '‚¨ÖÔ∏è –ó–∞–ø–∞–¥' :
        #direction = context.args[0].lower()
        direction = text
        answer = []
        moved = game.move_to(direction, answer)
        
        if moved:            
            #connections = list(game.current_location.connections.keys())     #–ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
            direction = ', '.join(game.current_location.connections.keys())  #–ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å–ø–∏—Å–æ–∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π    

            location_desc = game.current_location.description                #–ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –ª–æ–∫–∞—Ü–∏–∏
            location_desc = location_desc + "\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è:\n" 
            for key, value in game.current_location.connections.items():
                #print(f"{key}: {value}")
                location_desc = location_desc + key + " - " + value.name + "\n"

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π (–≤—ã—Ö–æ–¥–æ–≤)
            connections = list(game.current_location.connections.keys())    
            #keyboard = [[direction] for direction in connections]  # –ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ ‚Äî –≤ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ    
            keyboard = [[direction for direction in connections]]  # –í—Å–µ –∫–Ω–æ–ø–∫–∏ ‚Äî –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ    
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)  
            await update.message.reply_text(location_desc, reply_markup=reply_markup)
        else:
            await update.message.reply_text("–ù–µ–ª—å–∑—è –ø—Ä–æ–π—Ç–∏ –≤ —ç—Ç–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏.")
            
            #key = game.current_location.connections[direction].key
            #await update.message.reply_text(key)
            await update.message.reply_text(', '.join(answer))

    elif text == 'üß≥':
        #inventory = list(game.player.inventory)
        #.current_box
        game.current_box = game.player.inventory

        #–†–∞–∑–¥–µ–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –∫—Ä–∞—Ç–Ω—ã–µ 6
        result = []
        for i in range(0, len(game.current_box), 6):
            sublist_objects = game.current_box[i:i+6]
            sublist_picture = [obj.picture for obj in sublist_objects]
            result.append(sublist_picture)
            
        #keyboard = [[element.picture for element in game.current_box]] # –ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ ‚Äî –≤ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ   
        keyboard = result
        keyboard.append(['üëÄ'])
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)  
        await update.message.reply_text('üß≥', reply_markup=reply_markup)
    
    elif text == 'üî™' or text == 'üß§':       
        
        if text == 'üî™': 
            for item in game.current_box:
                if item.picture == 'üî™':
                    found_item = item
                    break
            
            text_message = f"{found_item.picture}. {found_item.name}. {found_item.description}. –£—Ä–æ–Ω: {found_item.attack}."
            keyboard = []
            keyboard.append(['üñê','üóëÔ∏è'])
            keyboard.append(['üëÄ','üß≥'])
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)  
            await update.message.reply_text( text_message, reply_markup=reply_markup)
        
    elif text == 'üëÄ':
        location = game.current_location                                 #–ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ª–æ–∫–∞—Ü–∏—é
        direction = ', '.join(game.current_location.connections.keys())  #–ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å–ø–∏—Å–æ–∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π    
    
        location_desc = game.current_location.description                #–ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –ª–æ–∫–∞—Ü–∏–∏
        location_desc = location_desc + "\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è:\n" 
        for key, value in game.current_location.connections.items():
            #print(f"{key}: {value}")
            location_desc = location_desc + key + " - " + value.name + "\n"
                
            #await update.message.reply_text(key + " " + value.name)
    
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π (–≤—ã—Ö–æ–¥–æ–≤)
        connections = list(game.current_location.connections.keys())     #–ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
        keyboard = [[direction for direction in connections]]  # –ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ ‚Äî –æ—Ç–¥–µ–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞    
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)  
        await update.message.reply_text(location_desc, reply_markup=reply_markup)
           


async def start(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ. –Ø –±–æ—Ç. ")

async def game(update: Update, context: CallbackContext) -> None:
    user_id = update.effective_user.id
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é
    user_games[user_id] = Game()
    game = user_games.get(user_id)
    await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–µ–∫—Å—Ç–æ–≤—É—é –±—Ä–æ–¥–∏–ª–∫—É!\n" +
                                    "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–µ–π—Å—Ç–≤–∏—è\n" +
                                    "üëÄ –æ—Å–º–æ—Ç—Ä–µ—Ç—å—Å—è\n" +
                                    "üß≥ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å\n" +
                                    "‚¨ÜÔ∏è –∏–¥—Ç–∏ –Ω–∞ —Å–µ–≤–µ—Ä\n" +
                                    "‚¨áÔ∏è –∏–¥—Ç–∏ –Ω–∞ —é–≥\n" +
                                    "‚û°Ô∏è –∏–¥—Ç–∏ –Ω–∞ –≤–æ—Å—Ç–æ–∫\n" +
                                    "‚¨ÖÔ∏è –∏–¥—Ç–∏ –Ω–∞ –∑–∞–ø–∞–¥" 
                                   )
    #üëÄ Eyes
    #üëÅÔ∏è Eye #üëÅ#üëÄ Eyes
    location_desc = game.current_location.description                #–ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –ª–æ–∫–∞—Ü–∏–∏
    direction = ', '.join(game.current_location.connections.keys())  #–ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å–ø–∏—Å–æ–∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π 
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π (–≤—ã—Ö–æ–¥–æ–≤)
    connections = list(game.current_location.connections.keys())     #–ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
    keyboard = [[direction for direction in connections],
               ['üëÄ','üß≥']]     
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)  
    await update.message.reply_text(location_desc, reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /look ‚Äî –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∫–æ–º–Ω–∞—Ç—ã
async def look(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    game = user_games.get(user_id)
    if not game:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π /game.")
        return
    
    location = game.current_location                                 #–ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ª–æ–∫–∞—Ü–∏—é
    direction = ', '.join(game.current_location.connections.keys())  #–ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å–ø–∏—Å–æ–∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π    

    location_desc = game.current_location.description                #–ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –ª–æ–∫–∞—Ü–∏–∏
    location_desc = location_desc + "\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è:\n" 
    for key, value in game.current_location.connections.items():
        #print(f"{key}: {value}")
        location_desc = location_desc + key + " - " + value.name + "\n"
            
        #await update.message.reply_text(key + " " + value.name)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π (–≤—ã—Ö–æ–¥–æ–≤)
    connections = list(game.current_location.connections.keys())     #–ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
    keyboard = [[direction for direction in connections]]  # –ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ ‚Äî –æ—Ç–¥–µ–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞    
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)  
    await update.message.reply_text(location_desc, reply_markup=reply_markup)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π (–≤—ã—Ö–æ–¥–æ–≤)
    #room_exits = list(game.rooms[game.current_room]['exits'].keys())    
    #keyboard = [[direction] for direction in room_exits]  # –ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ ‚Äî –æ—Ç–¥–µ–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞    
    #reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)    
    #await update.message.reply_text(description, reply_markup=reply_markup)
    #await update.message.reply_text("room_exits" + room_exits)

    #keyboard = ReplyKeyboardMarkup(keyboard=[
    #            ['Button 1', 'Button 2'],
    #            ['Button 3', 'Button 4']
    #        ])
    #await update.message.reply_text(room_exits, reply_markup=keyboard)
    

    

async def excel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ excel —Ñ–∞–π–ª–∞")
    
    chat_id = update.effective_chat.id

    # –ò—â–µ–º –≤ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Ñ–∞–π–ª–∞ Excel
    # –ü–æ–ª—É—á–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å–æ–æ–±—â–µ–Ω–∏–π (–º–æ–∂–Ω–æ –±–æ–ª—å—à–µ –∏–ª–∏ –º–µ–Ω—å—à–µ)

    message_id = 9
   
    message_to_copy = await context.bot.forward_message(chat_id, chat_id, message_id)
    if message_to_copy.text:
        await update.message.reply_text(text=message_to_copy.text)
    
    await update.message.reply_text("–≠—Ç–∞–ø 1 –æ–±—Ä–∞–±–æ—Ç–∫–∏ excel —Ñ–∞–π–ª–∞")

    if message_to_copy.document:
    #if message_to_copy.text:
        await context.bot.send_document(chat_id=chat_id, document=message_to_copy.document.file_id)
        text="–î–æ–∫—É–º–µ–Ω—Ç id: " + str(message_to_copy.document.file_id)
        await context.bot.send_message(chat_id=chat_id, text=text)
        file = await message_to_copy.document.get_file()
        TEMP_FILE_PATH = 'temp_excel.xlsx'
        await file.download_to_drive(TEMP_FILE_PATH)

         # –û—Ç–∫—Ä—ã–≤–∞–µ–º Excel –∏ –º–µ–Ω—è–µ–º —è—á–µ–π–∫–∏ A1 -> A2
        wb = openpyxl.load_workbook(TEMP_FILE_PATH)
        ws = wb.active

        cell_a1_value = ws['A1'].value
        ws['A2'].value = cell_a1_value

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ç–æ—Ç –∂–µ —Ñ–∞–π–ª
        wb.save(TEMP_FILE_PATH)

        # –°–æ–∑–¥–∞—ë–º InputFile –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
        #new_file = InputFile(open(TEMP_FILE_PATH, 'rb'))
        
        await update.message.reply_text("–≠—Ç–∞–ø 2 –æ–±—Ä–∞–±–æ—Ç–∫–∏ excel —Ñ–∞–π–ª–∞")
        await update.message.reply_text(TEMP_FILE_PATH)
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ InputMediaDocument
        #with open(TEMP_FILE_PATH, 'rb') as f:
        #    new_file = InputFile(f)

            # –ó–∞–º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∞–π–ª–æ–º
        #   await context.bot.edit_message_media(
        #       chat_id=chat_id,
        #       message_id=message_id,
        #       media=InputMediaDocument(media=new_file)
        #   )
            
        with open(TEMP_FILE_PATH, "rb") as file:  
            media = InputMediaDocument(file)  
            message_id_2 = 351
            await context.bot.edit_message_media(chat_id=chat_id, message_id=message_id_2, media=media)  

        await update.message.reply_text("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω.")


        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º A1
        await update.message.reply_text(f"–ó–Ω–∞—á–µ–Ω–∏–µ —è—á–µ–π–∫–∏ A1: {cell_a1_value}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Ñ–∞–π–ª  
        #await context.bot.send_document(
        #    chat_id=chat_id,
        #    document=new_file,
        #    filename='–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π_—Ñ–∞–π–ª.xlsx'
        #)
        await update.message.reply_text("–≠—Ç–∞–ø 3 –æ–±—Ä–∞–±–æ—Ç–∫–∏ excel —Ñ–∞–π–ª–∞")
        
        #await context.bot.edit_message_media(
        #        chat_id=chat_id,
        #        message_id=message_id,
        #        media=InputMediaDocument(media=new_file)
        #    )
        await update.message.reply_text("–ö–æ–Ω–µ—Ü –æ–±—Ä–∞–±–æ—Ç–∫–∏ excel —Ñ–∞–π–ª–∞")
            
      

'''
    excel_file_bytes = None
'''
#-------------------------------------------------------------------

async def main():
    app = Application.builder().token(TOKEN).updater(None).write_timeout(30).read_timeout(30).build()
    
    #app.add_handler(MessageHandler(filters.ALL, echo)) # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND) & (~filters.REPLY), echo)) # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥
    app.add_handler(MessageHandler(filters.REPLY & (~filters.COMMAND), def_reply)) # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥
    
    #app.add_handler(MessageHandler(def_text, content_types=['text']))
    app.add_handler(CommandHandler('start', start)) 
    app.add_handler(CommandHandler('game', game)) 
    app.add_handler(CommandHandler('look', look))
    app.add_handler(CommandHandler('excel', excel)) 
    await app.bot.set_webhook(f"{URL}/telegram", allowed_updates=Update.ALL_TYPES)
    print("await app.bot.set_webhook(f{URL}/telegram, allowed_updates=Update.ALL_TYPES)")
    print(f"{URL}/telegram")

    async def telegram(request: Request) -> Response:
        await app.update_queue.put(Update.de_json(await request.json(), app.bot))
        return Response()

    async def health(_: Request) -> PlainTextResponse:
        return PlainTextResponse("ok")

    starlette = Starlette(routes=[
        Route("/telegram", telegram, methods=["POST"]),
        Route("/healthcheck", health, methods=["GET"]),
#        Route("/health", health, methods=["GET"]),
    ])

    server = uvicorn.Server(
        uvicorn.Config(app=starlette, host="0.0.0.0", port=PORT, use_colors=False)
    )
    async with app:
        await app.start()
        await server.serve()
        await app.stop()

#-------------------------------------------------------------------
        
def self_ping_loop():
    """
    –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø–∏–Ω–≥—É–µ—Ç /health —á–µ—Ä–µ–∑ –≤–Ω–µ—à–Ω–∏–π URL.
    –≠—Ç–æ —Å–æ–∑–¥–∞—ë—Ç –≤—Ö–æ–¥—è—â–∏–π HTTP-—Ç—Ä–∞—Ñ–∏–∫ –∏ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –∞–≤—Ç–æ—É—Å—ã–ø–ª–µ–Ω–∏–µ –Ω–∞ Free –ø–ª–∞–Ω–µ.
    –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: —É Render Free Web Services –∑–∞—Å—ã–ø–∞—é—Ç –ø–æ—Å–ª–µ ~15 –º–∏–Ω—É—Ç –±–µ–∑ –≤—Ö–æ–¥—è—â–µ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞.
    """
    if not BASE_URL:
        print("BASE_URL –Ω–µ –∑–∞–¥–∞–Ω; —Å–∞–º–æ–ø–∏–Ω–≥ –æ—Ç–∫–ª—é—á—ë–Ω (–Ω–µ –∑–Ω–∞–µ–º, –∫—É–¥–∞ —Å—Ç—É—á–∞—Ç—å—Å—è).")
        #app.logger.warning(
        #    "BASE_URL –Ω–µ –∑–∞–¥–∞–Ω; —Å–∞–º–æ–ø–∏–Ω–≥ –æ—Ç–∫–ª—é—á—ë–Ω (–Ω–µ –∑–Ω–∞–µ–º, –∫—É–¥–∞ —Å—Ç—É—á–∞—Ç—å—Å—è)."
        #)
        return

#    ping_url = f"{BASE_URL}/health" #/healthcheck
    ping_url = f"{BASE_URL}/healthcheck" 
    print("–°–∞–º–æ–ø–∏–Ω–≥ –≤–∫–ª—é—á—ë–Ω, URL: %s, –∏–Ω—Ç–µ—Ä–≤–∞–ª: %s —Å–µ–∫", ping_url, PING_INTERVAL_SECONDS)
    #app.logger.info("–°–∞–º–æ–ø–∏–Ω–≥ –≤–∫–ª—é—á—ë–Ω, URL: %s, –∏–Ω—Ç–µ—Ä–≤–∞–ª: %s —Å–µ–∫", ping_url, PING_INTERVAL_SECONDS)
    while True:
        try:
            requests.get(ping_url, timeout=10)
        except Exception as e:
            print("–û—à–∏–±–∫–∞ —Å–∞–º–æ–ø–∏–Ω–≥–∞: %s", e)
            #app.logger.warning("–û—à–∏–±–∫–∞ —Å–∞–º–æ–ø–∏–Ω–≥–∞: %s", e)
        time.sleep(PING_INTERVAL_SECONDS)


# –°—Ç–∞—Ä—Ç —Ñ–æ–Ω–æ–≤—ã—Ö –ø–æ—Ç–æ–∫–æ–≤ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–æ–¥—É–ª—è (–∫–æ–≥–¥–∞ –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–¥–Ω–∏–º–∞–µ—Ç—Å—è gunicorn-–æ–º)
#threading.Thread(target=ensure_webhook, daemon=True).start()
#if SELF_PING_ENABLED:
threading.Thread(target=self_ping_loop, daemon=True).start()

if __name__ == "__main__":
    asyncio.run(main())
#‚õî‚úÖ ü§∑üîé üéí‚ö†Ô∏èü§ñüõë‚ùìüß≠üì¶‚öîÔ∏èüõ°üó°üèÜüè∑üìäüëïüß§üß∑üö∂üîéüñê üëÅ‚¨ÜÔ∏è‚¨áÔ∏è‚û°Ô∏è‚¨ÖÔ∏èüî™#üíÄ ‚ò†Ô∏è üí• üó°Ô∏è üõ°Ô∏èüóëÔ∏è
#üó°Ô∏è‚öîÔ∏èüó°‚öîüèπüõ°Ô∏èüî™‚öúÔ∏èüëë‚öúüî∞üî±‚õèüíéüèÜ‚ò£‚õ©Ô∏è‚ú¥üî•‚öï‚ò†‚úùü™Ωü™ìüï∑üíÄüåÄ‚òØüñå‚Üóüö©üíò‚òùü¶ÖüèÆüÜï
#üëã Waving Hand
#ü§ö Raised Back of Hand
#üñêÔ∏è Hand With Fingers Splayed
#‚úã Raised Hand
#üññ Vulcan Salute
#ü´± Rightwards Hand
#ü´≤ Leftwards Hand
#ü´≥ Palm Down Hand
#ü´¥ Palm Up Hand
#üëå OK Hand
#ü§å Pinched Fingers
#ü§è Pinching Hand
#‚úåÔ∏è Victory Hand
#ü§û Crossed Fingers
#ü´∞ Hand With Index Finger And Thumb Crossed
#ü§ü Love-You Gesture
#ü§ò Sign of the Horns
#ü§ô Call Me Hand
#üëà Backhand Index Pointing Left
#üëâ Backhand Index Pointing Right
#üëÜ Backhand Index Pointing Up
#üñï Middle Finger
#üëá Backhand Index Pointing Down
#‚òùÔ∏è Index Pointing Up
#ü´µ Index Pointing At The Viewer
#üëç Thumbs Up
#üëé Thumbs Down
#‚úä Raised Fist
#üëä Oncoming Fist
#ü§õ Left-Facing Fist
#ü§ú Right-Facing Fist
#üëè Clapping Hands
#üôå Raising Hands
#ü´∂ Heart Hands
#üëê Open Hands
#ü§≤ Palms Up Together
#ü§ù Handshake
#üôè Folded Hands
#‚úçÔ∏è Writing Hand
#üíÖ Nail Polish
#üí™ Flexed Biceps
#ü¶æ Mechanical Arm
#ü¶ø Mechanical Leg
#ü¶µ Leg
#ü¶∂ Foot
#üëÇ Ear
#ü¶ª Ear With Hearing Aid
#üëÉ Nose
#ü¶∑ Tooth
#ü¶¥ Bone
#üëÄ Eyes
#üëÅÔ∏è Eye
#üëÖ Tongue
#üëÑ Mouth
#ü´¶ Biting Lip
#üë∂ Baby
#üëµ Old Woman
#ü§¶ Person Facepalming
#ü§¶‚Äç‚ôÇÔ∏è Man Facepalming
#ü§¶‚Äç‚ôÄÔ∏è Woman Facepalming
#ü§∑ Person Shrugging
#ü§∑‚Äç‚ôÇÔ∏è Man Shrugging
#ü§∑‚Äç‚ôÄÔ∏è Woman Shrugging
#üë®‚Äç‚öïÔ∏è Ô∏èMan Health Worker
#üë©‚Äç‚öïÔ∏è Ô∏èWoman Health Worker
#üë®‚Äçüè´ Man Teacher
#üßë‚Äçüíª Technologist
#üë®‚Äçüíª Man Technologist
#üë©‚Äçüíª Woman Technologist
#üëÆ‚Äç‚ôÇÔ∏è Man Police Officer
#üëÆ‚Äç‚ôÄÔ∏è Woman Police Officer
#ü§∞ Pregnant Woman
#üéÖ Santa Claus
#ü§∂ Mrs. Claus
#üßë‚ÄçüéÑ Mx Claus
#üßü Zombie
#üßü‚Äç‚ôÇÔ∏è Man Zombie
#üßü‚Äç‚ôÄÔ∏è Woman Zombie
#üíÉ Woman Dancing
#üï∫ Man Dancing
#üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Family: Man, Woman, Girl, Boy
#üó£Ô∏è Speaking Head
#üë§ Bust in Silhouette
#üë• Busts in Silhouette
#ü´Ç People Hugging
#üë£ Footprints
#üêº Animals & Nature
#
#üêµ Monkey Face
#ü¶ç Gorilla
#üê∂ Dog Face
#ü¶ä Fox
#ü¶ù Raccoon
#üê± Cat Face
#üêØ Tiger Face
#üêÖ Tiger
#üêÜ Leopard
#üê¥ Horse Face
#üêé Horse
#ü¶Ñ Unicorn
#ü¶ì Zebra
#ü¶å Deer
#ü¶¨ Bison
#üêÇ Ox
#üêÑ Cow
#üê∑ Pig Face
#üêΩ Pig Nose
#ü¶ô Llama
#üê≠ Mouse Face
#üêπ Hamster
#üê∞ Rabbit Face
#üêá Rabbit
#ü¶á Bat
#üêª Bear
#üêª‚Äç‚ùÑÔ∏è Polar Bear
#üê® Koala
#üêº Panda
#ü¶ò Kangaroo
#üêæ Paw Prints
#üêî Chicken
#üê£ Hatching Chick
#üê§ Baby Chick
#üê• Front-Facing Baby Chick
#üê¶ Bird
#üêß Penguin
#üïäÔ∏è Dove
#ü¶Ü Duck
#ü¶¢ Swan
#ü¶â Owl
#ü¶ú Parrot
#üê¢ Turtle
#üêç Snake
#üê≥ Spouting Whale
#ü¶≠ Seal
#üêü Fish
#üê† Tropical Fish
#üêô Octopus
#üêå Snail
#ü¶ã Butterfly
#ü™≤ Beetle
#üêû Lady Beetle
#ü™≥ Cockroach
#üï∑Ô∏è Spider
#üï∏Ô∏è Spider Web
#ü¶ü Mosquito
#ü¶† Microbe
#üå∏ Cherry Blossom
#üåπ Rose
#üå∫ Hibiscus
#üåº Blossom
#üå∑ Tulip
#üå± Seedling
#üå≤ Evergreen Tree
#üå≥ Deciduous Tree
#üå¥ Palm Tree
#üåµ Cactus
#üåø Herb
#üçÄ Four Leaf Clover
#
#üçï Food & Drink
#
#üçå Banana
#üçì Strawberry
#ü•® Pretzel
#ü•û Pancakes
#üçñ Meat on Bone
#üçó Poultry Leg
#üçî Hamburger
#üçü French Fries
#üçï Pizza
#üå≠ Hot Dog
#ü•™ Sandwich
#üåÆ Taco
#ü•ô Stuffed Flatbread
#üç≥ Cooking
#üçø Popcorn
#ü•´ Canned Food
#üç± Bento Box
#üçò Rice Cracker
#üçô Rice Ball
#üç¢ Oden
#üç£ Sushi
#üç• Fish Cake With Swirl
#üç° Dango
#ü¶û Lobster
#ü¶ê Shrimp
#üç¶ Soft Ice Cream
#üç© Doughnut
#üç™ Cookie
#üéÇ Birthday Cake
#üç∞ Shortcake
#üßÅ Cupcake
#ü•ß Pie
#üç´ Chocolate Bar
#üç≠ Lollipop
#üçÆ Custard
#‚òï Hot Beverage
#üçæ Bottle With Popping Cork
#üç∑ Wine Glass
#üç∏ Cocktail Glass
#üçπ Tropical Drink
#ü•Ç Clinking Glasses
#ü•É Tumbler Glass
#ü´ó Pouring Liquid
#ü•§ Cup With Straw
#üßã Bubble Tea
#üßÉ Beverage Box
#üßâ Mate
#üçΩÔ∏è Fork and Knife With Plate
#
#üåá Travel & Places
#
#üß≠ Compass
#üèïÔ∏è Camping
#üèñÔ∏è Beach With Umbrella
#üèùÔ∏è Desert Island
#üèõÔ∏è Classical Building
#üè† House
#‚ô®Ô∏è Hot Springs
#üé¢ Roller Coaster
#üöÇ Locomotive
#üöë Ambulance
#üöì Police Car
#üöï Taxi
#üöó Automobile
#üõ•Ô∏è Motor Boat
#‚úàÔ∏è Airplane
#üöÄ Rocket
#üß≥ Luggage 
#‚åõ Hourglass Done
#‚è≥ Hourglass Not Done
#üåë New Moon
#üåí Waxing Crescent Moon
#üåì First Quarter Moon
#üåî Waxing Gibbous Moon
#üåï Full Moon
#üåñ Waning Gibbous Moon
#üåó Last Quarter Moon
#üåò Waning Crescent Moon
#üåö New Moon Face
#üåõ First Quarter Moon Face
#üåú Last Quarter Moon Face
#üå°Ô∏è Thermometer
#‚òÄÔ∏è Sun
#üåù Full Moon Face
#üåû Sun With Face
#‚≠ê Star
#üåü Glowing Star
#‚òÅÔ∏è Cloud
#‚õÖ Sun Behind Cloud
#‚õàÔ∏è Cloud With Lightning and Rain
#üå§Ô∏è Sun Behind Small Cloud
#üå•Ô∏è Sun Behind Large Cloud
#üå¶Ô∏è Sun Behind Rain Cloud
#üåßÔ∏è Cloud With Rain
#üå®Ô∏è Cloud With Snow
#üå©Ô∏è Cloud With Lightning
#‚ö° High Voltage
#‚ùÑÔ∏è Snowflake
#‚òÉÔ∏è Snowman
#‚õÑ Snowman Without Snow
#üî• Fire
#
#üéà Activities
#
#üéÉ Jack-O-Lantern
#üéÑ Christmas Tree
#üéÜ Fireworks
#üéá Sparkler
#üß® Firecracker
#‚ú® Sparkles
#üéà Balloon
#üéâ Party Popper
#üéä Confetti Ball
#üéóÔ∏è Reminder Ribbon
#üéüÔ∏è Admission Tickets
#üé´ Ticket
#üéñÔ∏è Military Medal
#üèÜ Trophy
#üèÖ Sports Medal
#ü•á 1st Place Medal
#ü•à 2nd Place Medal
#ü•â 3rd Place Medal
#‚öΩ Soccer Ball
#üèÄ Basketball
#üõ∑ Sled
#üîÆ Crystal Ball
#ü™Ñ Magic Wand
#üéÆ Video Game
#ü™© Mirror Ball
#üé≠ Performing Arts
#üé® Artist Palette
#
#üìÆ Objects
#
#üí£ Bomb
#üëõ Purse
#üëú Handbag
#üõçÔ∏è Shopping Bags
#üë† High-heeled Shoe
#üëë Crown
#üé© Top Hat
#üéì Graduation Cap
#ü™ñ Military Helmet
#üíÑ Lipstick
#üíé Gem Stone
#üì£ Megaphone
#üéµ Musical Note
#üé∂ Musical Notes
#üéôÔ∏è Studio Microphone
#üé§ Microphone
#üì± Mobile Phone
#‚òéÔ∏è Telephone
#üìû Telephone Receiver
#üíª Laptop
#üñ®Ô∏è Printer
#‚å®Ô∏è Keyboard
#üßÆ Abacus
#üé¨ Clapper Board
#üì∫ Television
#üîç Magnifying Glass Tilted Left
#üîé Magnifying Glass Tilted Right
#üí° Light Bulb
#üìñ Open Book
#üìö Books
#üì∞ Newspaper
#üí∞ Money Bag
#ü™ô Coin
#üí∏ Money With Wings
#‚úâÔ∏è Envelope
#üì§ Outbox Tray
#üì• Inbox Tray
#üì≠ Open Mailbox With Lowered Flag
#üó≥Ô∏è Ballot Box With Ballot
#üìù Memo
#üíº Briefcase
#üìÅ File Folder
#üìÇ Open File Folder
#üóÇÔ∏è Card Index Dividers
#üìÜ Tear-Off Calendar
#üìà Chart Increasing
#üìâ Chart Decreasing
#üìä Bar Chart
#üîê Locked With Key
#üîë Key
#üóùÔ∏è Old Key
#üß∞ Toolbox
#üß™ Test Tube
#üî¨ Microscope
#üî≠ Telescope
#üíâ Syringe
#üíä Pill
#ü©∫ Stethoscope
#üßª Roll Of Paper
#üßº Soap
#üßΩ Sponge
#üõí Shopping Cart
#üóëÔ∏è :wastebasket:
#‚ö∞Ô∏è Coffin
#üóø Moai
#
#üíØ Symbols
#
#üöπ Men‚Äôs Room
#üö∫ Women‚Äôs Room
#üöº Baby Symbol
#üõÉ Customs
#üîû No One Under Eighteen
#üîù TOP Arrow
#‚ôê Sagittarius
#‚ôë Capricorn
#‚ôí Aquarius
#‚ôì Pisces
#‚õé Ophiuchus
#‚ÄºÔ∏è Double Exclamation Mark
#‚ÅâÔ∏è Exclamation Question Mark
#‚ùì Question Mark
#‚ùî White Question Mark
#‚ùï White Exclamation Mark
#‚ùó Exclamation Mark
#üí± Currency Exchange
#‚úÖ Check Mark Button
#‚òëÔ∏è Check Box With Check
#‚úîÔ∏è Check Mark
#‚ùå Cross Mark
#üÜí COOL Button
#üÜì FREE Button
#üÜï NEW Button
#üÜó OK Button
#üÜô UP! Button
#üòÄ Grinning Face
#üòÉ Grinning Face With Big Eyes
#üòÑ Grinning Face With Smiling Eyes
#üòÅ Beaming Face With Smiling Eyes
#üòÜ Grinning Squinting Face
#üòÖ Grinning Face With Sweat
#ü§£ Rolling on the Floor Laughing
#üòÇ Face With Tears of Joy
#üôÇ Slightly Smiling Face
#üôÉ Upside-Down Face
#ü´† Melting Face
#üòâ Winking Face
#üòä Smiling Face With Smiling Eyes
#üòá Smiling Face With Halo
#ü•∞ Smiling Face With Hearts
#üòç Smiling Face With Heart-Eyes
#ü§© Star-Struck
#üòò Face Blowing a Kiss
#üòó Kissing Face
#‚ò∫Ô∏è Smiling Face
#üòö Kissing Face With Closed Eyes
#üòô Kissing Face With Smiling Eyes
#ü•≤ Smiling Face With Tear
#üòã Face Savoring Food
#üòõ Face With Tongue
#üòú Winking Face With Tongue
#ü§™ Zany Face
#üòù Squinting Face With Tongue
#ü§ë Money-Mouth Face
#ü§ó Hugging Face
#ü§≠ Face With Hand Over Mouth
#ü´¢ Face With Open Eyes And Hand Over Mouth
#ü´£ Face With Peeking Eye
#ü§´ Shushing Face
#ü§î Thinking Face
#ü´° Saluting Face
#ü§ê Zipper-Mouth Face
#ü§® Face With Raised Eyebrow
#üòê Neutral Face
#üòë Expressionless Face
#üò∂ Face Without Mouth
#ü´• Dotted Line Face
#üò∂‚Äçüå´Ô∏è Face in clouds
#üòè Smirking Face
#üòí Unamused Face
#üôÑ Face With Rolling Eyes
#üò¨ Grimacing Face
#üòÆ‚Äçüí® Face exhaling
#ü§• Lying Face
#üòå Relieved Face
#üòî Pensive Face
#üò™ Sleepy Face
#ü§§ Drooling Face
#üò¥ Sleeping Face
#üò∑ Face With Medical Mask
#ü§í Face With Thermometer
#ü§ï Face With Head-Bandage
#ü§¢ Nauseated Face
#ü§Æ Face Vomiting
#ü§ß Sneezing Face
#ü•µ Hot Face
#ü•∂ Cold Face
#ü•¥ Woozy Face
#üòµ Dizzy Face
#üòµ‚Äçüí´ Face with spiral eyes
#ü§Ø Exploding Head
#ü§† Cowboy Hat Face
#ü•≥ Partying Face
#ü•∏ Disguised Face
#üòé Smiling Face With Sunglasses
#ü§ì Nerd Face
#üßê Face With Monocle
#üòï Confused Face
#ü´§ Face With Diagonal Mouth
#üòü Worried Face
#üôÅ Slightly Frowning Face
#‚òπÔ∏è Frowning Face
#üòÆ Face With Open Mouth
#üòØ Hushed Face
#üò≤ Astonished Face
#üò≥ Flushed Face
#ü•∫ Pleading Face
#ü•π Face Holding Back Tears
#üò¶ Frowning Face With Open Mouth
#üòß Anguished Face
#üò® Fearful Face
#üò∞ Anxious Face With Sweat
#üò• Sad But Relieved Face
#üò¢ Crying Face
#üò≠ Loudly Crying Face
#üò± Face Screaming in Fear
#üòñ Confounded Face
#üò£ Persevering Face
#üòû Disappointed Face
#üòì Downcast Face With Sweat
#üò© Weary Face
#üò´ Tired Face
#ü•± Yawning Face
#üò§ Face With Steam From Nose
#üò° Pouting Face
#üò† Angry Face
#ü§¨ Face With Symbols On Mouth
#üòà Smiling Face With Horns
#üëø Angry Face With Horns
#üíÄ Skull
#‚ò†Ô∏è Skull and Crossbones
#üí© Pile of Poo
#ü§° Clown Face
#üëπ Ogre
#üë∫ Goblin
#üëª Ghost
#üëΩ Alien
#üëæ Alien Monster
#ü§ñ Robot
#üò∫ Grinning Cat
#üò∏ Grinning Cat With Smiling Eyes
#üòπ Cat With Tears Of Joy
#üòª Smiling Cat With Heart-Eyes
#üòº Cat With Wry Smile
#üòΩ Kissing Cat
#üôÄ Weary Cat
#üòø Crying Cat
#üòæ Pouting Cat
#üôà See-No-Evil Monkey
#üôâ Hear-no-evil Monkey
#üôä Speak-No-Evil Monkey
#üíã Kiss Mark
#üíå Love Letter
#üíò Heart With Arrow
#üíù Heart With Ribbon
#üíñ Sparkling Heart
#üíó Growing Heart
#üíì Beating Heart
#üíû Revolving Hearts
#üíï Two Hearts
#üíü Heart Decoration
#‚ù£Ô∏è Heart Exclamation
#üíî Broken Heart
#‚ù§Ô∏è‚Äçüî• Heart on fire
#‚ù§Ô∏è‚Äçü©π Mending heart
#‚ù§Ô∏è Red Heart
#üß° Orange Heart
#üíõ Yellow Heart
#üíö Green Heart
#üíô Blue Heart
#üíú Purple Heart
#ü§é Brown Heart
#üñ§ Black Heart
#ü§ç White Heart
#üíØ Hundred Points
#üí¢ Anger Symbol
#üí• Collision
#üí´ Dizzy
#üí¨ Speech Balloon
#üóØÔ∏è Right Anger Bubble
#üí≠ Thought Balloon
#üí§ Zzz
#ü§∑ People & Body
# üßõüèΩ‚Äç‚ôÇÔ∏è –≤–∞–º–ø–∏—Ä
# üßõüèº‚Äç‚ôÄÔ∏è
#ü¶ñ
